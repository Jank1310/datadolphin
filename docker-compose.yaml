version: "3.7"

# Shared environment variables
x-default-env: &defaultEnv
  MINIO_HOST: minio
  MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
  MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
  MONGO_URL: ${MONGO_URL}
  TEMPORAL_ADDRESS: ${TEMPORAL_ADDRESS}
  TEMPORAL_NAMESPACE: ${TEMPORAL_NAMESPACE}
  SERVER_AUTH_TOKEN: ${SERVER_AUTH_TOKEN}
  NEXT_PUBLIC_FRONTEND_TOKEN: ${NEXT_PUBLIC_FRONTEND_TOKEN}

x-worker: &worker
  extends:
    file: docker-compose.base.yaml
    service: worker
  environment:
    <<: *defaultEnv
    PUBLIC_API_URL: ${PUBLIC_API_URL}
  networks:
    - backend-network

services:
  app:
    extends:
      file: docker-compose.base.yaml
      service: app
    environment:
      <<: *defaultEnv
      NEXT_PUBLIC_API_URL: ${PUBLIC_API_URL}
    networks:
      - frontend-network
      - backend-network
  worker-1:
    <<: *worker
  worker-2:
    <<: *worker
  worker-3:
    <<: *worker
  # STORAGE
  minio:
    extends:
      file: docker-compose.base.yaml
      service: minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    volumes:
      - miniostorage:/data
    networks:
      - backend-network
  temporal-postgresql:
    extends:
      file: docker-compose.base.yaml
      service: temporal-postgresql
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - backend-network
    volumes:
      - temporal-postgresql:/var/lib/postgresql/data
  mongodb:
    extends:
      file: docker-compose.base.yaml
      service: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
    volumes:
      - mongodb:/data/db
    networks:
      - backend-network
  # TEMPORAL
  temporal:
    extends:
      file: docker-compose.base.yaml
      service: temporal
    networks:
      - backend-network
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=temporal-postgresql
      - DYNAMIC_CONFIG_FILE_PATH=config/dynamicconfig/development.yaml
  temporal-ui:
    extends:
      file: docker-compose.base.yaml
      service: temporal-ui
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:3000
    networks:
      - backend-network
  # PROXY
  caddy:
    image: caddy
    container_name: caddy
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./caddy/Caddyfile:/etc/caddy/Caddyfile:ro
    networks:
      - frontend-network
    depends_on:
      - app
networks:
  backend-network:
    driver: bridge
    name: backend-network
  frontend-network:
    driver: bridge
    name: frontend-network
volumes:
  miniostorage:
  temporal-postgresql:
  mongodb:
  caddy_data:
  caddy_config:
